N1 <- data$counts[genotype[1],repli]
Var1 <- data$SNPs[data$SNPs$col == genotype[1],]$row
Var1 <- Var1[Var1 != genotype[1] & data$counts[Var1,repli] != 0]
Nmut1 <- sum(data$counts[Var1,repli])
V1 <- length(Var1)
N2 <- data$counts[genotype[2],repli]
Var2 <- data$SNPs[data$SNPs$col == genotype[2],]$row
Var2 <- Var2[Var2 != genotype[2] & data$counts[Var2,repli] != 0]
Nmut2 <- sum(data$counts[Var2,repli])
V2 <- length(Var2)
d12 <-dist12(data, genotype)
}
else {
N1 <- data$counts[genotype[1],repli]
Var1 <- data$SNPs[data$SNPs$col == genotype[1],]$row
Var1 <- Var1[Var1 != genotype[1] & data$counts[Var1,repli] != 0]
Nmut1 <- sum(data$counts[Var1,repli])
V1 <- length(Var1)
d12 <- 0
}
slippage <- graph_slippage(data, genotype, dslipmax, repli)
graph <- unique(c(genotype[1], Var1, slippage$seq))
if (heterozygote){
graph <- unique(c(graph, unique(c(genotype[2], Var2))))
}
ll <- NULL
#ratio A/(A+B)
if (heterozygote){
aux <- llratio_esp(N1/(N1+N2),Ntot = N1+N2,m = param$m,sratio = param$sratio)
if (is.nan(aux)) aux <- -Inf
ll <- rbind(ll, data.frame(component = "ratio_1/(1+2)-expected",
ll = aux))
}
#contamination
Nc <- Nreads - sum(data$counts[graph,repli])
ll <- rbind(ll, data.frame(component = "contamination",
ll = llcontamination(Nc/Nreads, lambda = param$lambda)))
#PCR errors
if (heterozygote){
ll <- rbind(ll, data.frame(component = "reads_mutations1",
ll = llabmut(Nmut1, N1 = N1, mu = param$mu)))
ll <- rbind(ll, data.frame(component = "variants_mutations1",
ll = llvariantobs(V1, Nmut = Nmut1)))
ll <- rbind(ll, data.frame(component = "reads_mutations2",
ll = llabmut(Nmut2, N1 = N2, mu = param$mu)))
ll <- rbind(ll, data.frame(component = "variants_mutations2",
ll = llvariantobs(V2, Nmut = Nmut2)))
}
else {
ll <- rbind(ll, data.frame(component = "2*reads_mutations1",
ll = 2*llabmut(Nmut1, N1 = N1, mu = param$mu)))
ll <- rbind(ll, data.frame(component = "2*variants_mutations1",
ll = 2*llvariantobs(V1, Nmut = Nmut1)))
}
#slippage
list_splippage <- unique(slippage$dist1)
n_non0 <- length(list_splippage)-1
if (heterozygote) n_non0 <- n_non0 - 1
for (d1 in list_splippage){
if (heterozygote){
ll <- rbind(ll, data.frame(component = paste0("slippage_from1_", d1),
ll = llslippage(sum(slippage[slippage$dist1 == d1,]$counts),
d1, N1 = N1, N2 = N2, d12 = d12)/n_non0))
}
else {
ll <- rbind(ll, data.frame(component = paste0("slippage_from1_", d1),
ll = llslippage(sum(slippage[slippage$dist1 == d1,]$counts),
d1, N1 = N1, N2 = 0, d12 = d12)/n_non0))
}
}
ll <- rbind(data.frame(component = "total", ll = sum(ll$ll)), ll)
ll
}
ll_sample <- function(data = testData,
genotype = c(1,1),
dslipmax = 1,
repli = 1:ncol(data$counts),
filter = 0,
param = list(m = m,
sratio = sratio,
lambda = lambda,
mu = mu,
nu_plus = nu_plus,
nu_minus = nu_minus)){
ll <- NULL
for (i in repli){
llrepli <- lltotal(data = data, genotype = genotype, repli = i, filter = filter)
if (!is.null(llrepli)){
llrepli$repli <- i
ll <- rbind(ll, llrepli)
}
}
ll <- rbind(data.frame(component = "Total_sample", ll = sum(ll[ll$component == "total",]$ll), repli = NA),ll)
ll
}
ll_short <- function(data = testData,
genotype = c(1,1),
repli = 1,
dslipmax = 1,
filter = 0,
param = list(m = m,
sratio = sratio,
lambda = lambda,
mu = mu,
nu_plus = nu_plus,
nu_minus = nu_minus)){
Nreads <- sum(data$counts[,repli])
if (Nreads <= filter){
return(NULL)
}
heterozygote <- genotype[1] != genotype[2]
if (heterozygote){
d12 <-dist12(data, genotype)
if (d12 < 0){
d12 <- -d12
genotype <- c(genotype[2], genotype[1])
}
N1 <- data$counts[genotype[1],repli]
Var1 <- data$SNPs[data$SNPs$col == genotype[1],]$row
Var1 <- Var1[Var1 != genotype[1] & data$counts[Var1,repli] != 0]
Nmut1 <- sum(data$counts[Var1,repli])
V1 <- length(Var1)
N2 <- data$counts[genotype[2],repli]
Var2 <- data$SNPs[data$SNPs$col == genotype[2],]$row
Var2 <- Var2[Var2 != genotype[2] & data$counts[Var2,repli] != 0]
Nmut2 <- sum(data$counts[Var2,repli])
V2 <- length(Var2)
d12 <-dist12(data, genotype)
}
else {
N1 <- data$counts[genotype[1],repli]
Var1 <- data$SNPs[data$SNPs$col == genotype[1],]$row
Var1 <- Var1[Var1 != genotype[1] & data$counts[Var1,repli] != 0]
Nmut1 <- sum(data$counts[Var1,repli])
V1 <- length(Var1)
N2 <- 0
d12 <- 0
}
ll <- NULL
#ratio A/(A+B)
if (heterozygote){
aux <- llratio_esp(N1/(N1+N2),Ntot = N1+N2,m = param$m,sratio = param$sratio)
if (is.nan(aux)) aux <- -Inf
ll <- rbind(ll, data.frame(component = "ratio_1/(1+2)-expected",
ll = aux))
}
#contamination
Nc <- max(Nreads - (1+param$mu+param$nu_plus + param$nu_minus)*
(N1+N2), 0)
ll <- rbind(ll, data.frame(component = "contamination",
ll = llcontamination(Nc/Nreads, lambda = param$lambda)))
ll <- rbind(data.frame(component = "total", ll = sum(ll$ll)), ll)
ll
}
ll_sample_short <- function(data = testData,
genotype = c(1,1),
dslipmax = 1,
repli = 1:ncol(data$counts),
filter = 0,
param = list(m = m,
sratio = sratio,
lambda = lambda,
mu = mu,
nu_plus = nu_plus,
nu_minus = nu_minus)){
ll <- NULL
for (i in repli){
llrepli <- ll_short(data = data, genotype = genotype, repli = i, filter = filter)
if (!is.null(llrepli)){
llrepli$repli <- i
ll <- rbind(ll, llrepli)
}
}
ll <- rbind(data.frame(component = "Total_sample", ll = sum(ll[ll$component == "total",]$ll), repli = NA),ll)
ll
}
load("/Users/elena/PycharmProjects/ngs_pipelines/ngs_pipelines_dev/testGraphLayout/WCH07851_Cl147.Rdata")
dataCl147bis <- testData
#rowSums(dataCl147bis$counts)
ll_sample(data = dataCl147bis, genotype = c(2,3))[1,2]
llratio_esp <- function(x, Ntot = 500, m = 0.5, sratio = 0.25){
-(x-m)^2/2/(sratio^2+m/Ntot)+1/2-
(m^2*exp(-m^2/2/(sratio^2+m/Ntot)) + (1-m)^2*exp(-(1-m)^2/2/(sratio^2+m/Ntot)))/
sqrt((sratio^2+m/Ntot))/2/sqrt(2*pi)/     (pnorm(1, m, sqrt((sratio^2+m/Ntot)))-                                  pnorm(0, m, sqrt((sratio^2+m/Ntot))))
}
ggplot()+stat_function(fun = llratio_esp)+
labs(x = "ratio A/(A+B)", y = "LL")+
ggtitle("LL of observed ratio A/(A+B) - Expectation(this LL)")
llcontamination <- function(x, lambda = 1/0.05) log(lambda)-lambda*x
ggplot()+stat_function(fun = llcontamination)+
labs(x = "contamination rate", y = "LL")+
ggtitle("LL of observed contamination rate")
llabmut <- function(x, N1 = 250, mu = 0.1){log(dpois(x, mu*N1))}
ggplot()+stat_function(fun = llabmut)+xlim(0, 100)+
labs(x="Abundance of mutated reads around A", y = "LL")+
ggtitle("LL of observed abundance of mutated reads around A")
llvariantobs <- function(x, Nmut = 25){log(dpois(x, Nmut))}
ggplot()+geom_point(aes(0:25, sapply(0:25, llvariantobs)))+
labs(x="Number of different mutated sequences around A", y = "LL")+
ggtitle("LL of observed abundance of\nmutated different sequences around A")
llslippage <- function(x, dA,
N1 = 250, N2 = 100, d12 = 3,
nu_minus = 0.05, nu_plus = 0.1){
#dA : distance from A
dB <- dA - d12
if (dA < 0) nuA <- nu_minus
else if (dA > 0) nuA <- nu_plus
else {return(0)}
if (dB < 0) nuB <- nu_minus
else if (dB > 0) nuB <- nu_plus
else {return(0)}
log(dpois(x, nuA^abs(dA)*N1+nuB^abs(dB)*N2))
}
lim <- 25
ggplot()+
geom_point(aes(0:lim, sapply(0:lim, llslippage, dA = -2), color = "-2"))+
geom_point(aes(0:lim, sapply(0:lim, llslippage, dA = 2), color = "2"))+
labs(x="Reads obtained by slippage", y = "LL", color = "distance\nfrom A")+
ggtitle("LL of reads obtained by slippage\nhere: ... -> 'pink' -> . -> A -> . -> 'blue' -> B -> ... ")
load("/Users/elena/PycharmProjects/ngs_pipelines/ngs_pipelines_dev/testGraphLayout/WCH07851_Cl147.Rdata")
dataCl147bis <- testData
#rowSums(dataCl147bis$counts)
ll_sample(data = dataCl147bis, genotype = c(2,3))[1,2]
ll_sample(data = dataCl147bis, genotype = c(2,2))[1,2]
ll_sample(data = dataCl147bis, genotype = c(3,3))[1,2]
ll_sample(data = dataCl147bis, genotype = c(2,7))[1,2]
dataCl147bis
dataCl147bis$sequences[genotype[1]]
dataCl147bis$sequences
dataCl147bis$sequences[2]
dataCl147bis$sequences[c(2,3)]
length(dataCl147bis$sequences[2])
nchar(dataCl147bis$sequences[2])
nchar(dataCl147bis$sequences[3])
dataCl147bis
View(dataCl147bis)
install.packages("roxygen2")
library(roxygen2)
library(devtools)
setwd("/Users/elena/PycharmProjects/ngs_pipelines/grail")
create("grail")
setwd("/Users/elena/PycharmProjects/ngs_pipelines")
create("grail")
install.packages(c("ggraph", "graphlayouts"))
ll_short <- function(data = testData,
genotype = c(1,1),
repli = 1,
dslipmax = 1,
filter = 0,
param = list(m = m,
sratio = sratio,
lambda = lambda,
mu = mu,
nu_plus = nu_plus,
nu_minus = nu_minus)){
Nreads <- sum(data$counts[,repli])
if (Nreads <= filter){
return(NULL)
}
heterozygote <- genotype[1] != genotype[2]
if (heterozygote){
d12 <-dist12(data, genotype)
if (d12 < 0){
d12 <- -d12
genotype <- c(genotype[2], genotype[1])
}
N1 <- data$counts[genotype[1],repli]
Var1 <- data$SNPs[data$SNPs$col == genotype[1],]$row
Var1 <- Var1[Var1 != genotype[1] & data$counts[Var1,repli] != 0]
Nmut1 <- sum(data$counts[Var1,repli])
V1 <- length(Var1)
N2 <- data$counts[genotype[2],repli]
Var2 <- data$SNPs[data$SNPs$col == genotype[2],]$row
Var2 <- Var2[Var2 != genotype[2] & data$counts[Var2,repli] != 0]
Nmut2 <- sum(data$counts[Var2,repli])
V2 <- length(Var2)
d12 <-dist12(data, genotype)
}
else {
N1 <- data$counts[genotype[1],repli]
Var1 <- data$SNPs[data$SNPs$col == genotype[1],]$row
Var1 <- Var1[Var1 != genotype[1] & data$counts[Var1,repli] != 0]
Nmut1 <- sum(data$counts[Var1,repli])
V1 <- length(Var1)
N2 <- 0
d12 <- 0
}
ll <- NULL
#ratio A/(A+B)
if (heterozygote){
aux <- llratio_esp(N1/(N1+N2),Ntot = N1+N2,m = param$m,sratio = param$sratio)
if (is.nan(aux)) aux <- -Inf
ll <- rbind(ll, data.frame(component = "ratio_1/(1+2)-expected",
ll = aux))
}
#contamination
Nc <- max(Nreads - (1+param$mu+param$nu_plus + param$nu_minus)*
(N1+N2), 0)
ll <- rbind(ll, data.frame(component = "contamination",
ll = llcontamination(Nc/Nreads, lambda = param$lambda)))
ll <- rbind(data.frame(component = "total", ll = sum(ll$ll)), ll)
ll
}
ll_sample_short <- function(data = testData,
genotype = c(1,1),
dslipmax = 1,
repli = 1:ncol(data$counts),
filter = 0,
param = list(m = m,
sratio = sratio,
lambda = lambda,
mu = mu,
nu_plus = nu_plus,
nu_minus = nu_minus)){
ll <- NULL
for (i in repli){
llrepli <- ll_short(data = data, genotype = genotype, repli = i, filter = filter)
if (!is.null(llrepli)){
llrepli$repli <- i
ll <- rbind(ll, llrepli)
}
}
ll <- rbind(data.frame(component = "Total_sample", ll = sum(ll[ll$component == "total",]$ll), repli = NA),ll)
ll
}
load("/Users/elena/PycharmProjects/ngs_pipelines/ngs_pipelines_dev/testGraphLayout/WCH05556_Cl527.Rdata")
dataCl527 <- testData
ll_sample(data = dataCl527, genotype = c(2,3))[1,2]
ll_sample(data = dataCl527, genotype = c(2,2))[1,2]
ll_sample(data = dataCl527, genotype = c(3,3))[1,2]
ll_sample(data = dataCl527, genotype = c(2,9))[1,2]
ll_sample_short(data = dataCl527, genotype = c(2,3))[1,2]
ll_sample_short(data = dataCl527, genotype = c(2,2))[1,2]
ll_sample_short(data = dataCl527, genotype = c(3,3))[1,2]
ll_sample_short(data = dataCl527, genotype = c(2,9))[1,2]
load("/Users/elena/PycharmProjects/ngs_pipelines/ngs_pipelines_dev/testGraphLayout/WCH05556_Lup20.Rdata")
dataLup20 <- testData
#rowSums(dataLup20$counts)
ll_sample(data = dataLup20, genotype = c(2,4))[1,2]
ll_sample(data = dataLup20, genotype = c(2,2))[1,2]
ll_sample(data = dataLup20, genotype = c(4,4))[1,2]
ll_sample_short(data = dataLup20, genotype = c(2,4))[1,2]
ll_sample_short(data = dataLup20, genotype = c(2,2))[1,2]
ll_sample_short(data = dataLup20, genotype = c(4,4))[1,2]
load("/Users/elena/PycharmProjects/ngs_pipelines/ngs_pipelines_dev/testGraphLayout/WCH07719_Cl147.Rdata")
dataCl147 <- testData
#rowSums(dataCl147$counts)
ll_sample(data = dataCl147, genotype = c(2,3))[1,2]
ll_sample(data = dataCl147, genotype = c(2,2))[1,2]
ll_sample(data = dataCl147, genotype = c(3,3))[1,2]
load("/Users/elena/PycharmProjects/ngs_pipelines/ngs_pipelines_dev/testGraphLayout/WCH07719_Cl147.Rdata")
dataCl147 <- testData
#rowSums(dataCl147$counts)
ll_sample(data = dataCl147, genotype = c(2,3))[1,2]
ll_sample(data = dataCl147, genotype = c(2,2))[1,2]
ll_sample(data = dataCl147, genotype = c(3,3))[1,2]
ll_sample_short(data = dataCl147, genotype = c(2,3))[1,2]
ll_sample_short(data = dataCl147, genotype = c(2,2))[1,2]
ll_sample_short(data = dataCl147, genotype = c(3,3))[1,2]
load("/Users/elena/PycharmProjects/ngs_pipelines/ngs_pipelines_dev/testGraphLayout/WCH07719_Cl527.Rdata")
dataCl527bis <- testData
#rowSums(dataCl527bis$counts)
ll_sample(data = dataCl527bis, genotype = c(2,6))[1,2]
ll_sample(data = dataCl527bis, genotype = c(2,2))[1,2]
ll_sample(data = dataCl527bis, genotype = c(6,6))[1,2]
ll_sample_short(data = dataCl527bis, genotype = c(2,6))[1,2]
ll_sample_short(data = dataCl527bis, genotype = c(2,2))[1,2]
ll_sample_short(data = dataCl527bis, genotype = c(6,6))[1,2]
rowSums(dataCl527bis$counts)
load("/Users/elena/PycharmProjects/ngs_pipelines/ngs_pipelines_dev/testGraphLayout/WCH06486_Cl274.Rdata")
dataCl274 <- testData
#rowSums(dataCl274$counts)
ll_sample(data = dataCl274, genotype = c(1,1))[1,2]
ll_sample(data = dataCl274, genotype = c(1,4))[1,2]
ll_sample(data = dataCl274, genotype = c(1,2))[1,2]
print("   ")
ll_sample(data = dataCl274, genotype = c(1,1), repli = 1:6)[1,2]
ll_sample(data = dataCl274, genotype = c(1,4), repli = 1:6)[1,2]
ll_sample(data = dataCl274, genotype = c(1,2), repli = 1:6)[1,2]
ll_sample(data = dataCl274, genotype = c(1,1), repli = 2)
Var1 <- dataCl274$SNPs[dataCl274$SNPs$col == 1,]$row
Var1 <- Var1[Var1 != 1 & dataCl274$counts[Var1,2] != 0]
sum(dataCl274$counts[Var1,2])
llvariantobs(length(Var1), Nmut = sum(dataCl274$counts[Var1,2]))
ll_sample(data = dataCl274, genotype = c(1,1))[1,2]
ll_sample(data = dataCl274, genotype = c(1,4))[1,2]
ll_sample(data = dataCl274, genotype = c(1,2))[1,2]
ll_sample(data = dataCl274, genotype = c(1,1), repli = 1:6)[1,2]
ll_sample(data = dataCl274, genotype = c(1,4), repli = 1:6)[1,2]
ll_sample(data = dataCl274, genotype = c(1,2), repli = 1:6)[1,2]
rowSums(dataCl274$counts)
ll_sample_short(data = dataCl274, genotype = c(1,1))[1,2]
ll_sample_short(data = dataCl274, genotype = c(1,4))[1,2]
ll_sample_short(data = dataCl274, genotype = c(1,2))[1,2]
setwd("./grail")
document()
setwd("..")
install("grail")
library(grail)
ll_sample()
library(grail)
load("/Users/elena/PycharmProjects/ngs_pipelines/ngs_pipelines_dev/testGraphLayout/WCH07719_Cl147.Rdata")
dataCl147 <- testData
ll_sample(data = dataCl147, genotype = c(2,3))[1,2]
m <- 0.5 #expected value of the ratio for heterozygotes
#Define standard deviation of the ratio for heterozygotes
alpha <- 0.05 #Confidence threshold
lower <- 0.0 #lower bound of confidence interval for the ratio
sratio <- (m-lower)/qnorm(1-alpha/2) #standard deviation of the ratio for heterozygotes
#contamination rate:
contamination_rate <- 0.05
lambda <- 1/contamination_rate
#PCR mutation rate
mu <- 0.2
#slippage
nu_plus <- 0.1 #rate: slippage +
nu_minus <- 0.05 #rate: slippage -
ll_sample(data = dataCl147, genotype = c(2,3))[1,2]
linkedBySlippage <- function(seq1, seq2, size) {
# linked by slippage if seq length difference is multiple of size
# if the difference in strings are due to max nbSlippage motif
# between the two sequences
# if nbSplippage==-1 any difference in slippage is OK
len1 <- nchar(seq1)
len2 <- nchar(seq2)
orientation <- nchar(seq1)>nchar(seq2)
if (orientation)  {
tmp  <- seq1
seq1 <- seq2
seq2 <- tmp
tmp  <- len1
len1 <- len2
len2 <- tmp
}
if ( ! (((len2 - len1) %% size) == 0) ) return(0)
#patch because the uniq function of the obitool3 does not work properly
if (seq1==seq2) return(0)
#i1 is the length of the common prefix, i.e. position of last matching nucleotide
i1 <- which(c(strsplit(seq1, split = "")[[1]][1:nchar(seq1)]!=strsplit(seq2, split = "")[[1]][1:nchar(seq1)], TRUE) )[1] - 1
#print("# common start seq")
#print(i1)
#print(substr(seq1, 1, i1))
#print(substr(seq2, 1, i1))
endseq1 <- substr(seq1, i1+1, nchar(seq1))
endseq2 <- substr(seq2, i1+1, nchar(seq2))
#print("# endseqs")
#print(endseq1)
#print(endseq2)
endseq2 <- substr(endseq2, nchar(endseq2)-nchar(endseq1)+1, nchar(endseq2))
#print(endseq2)
if (endseq1!=endseq2) return(0)
#i2 is the length of the common suffix, not overlapping the common prefix
i2 <- nchar(endseq2)
#  "acaggccctctcaatcattcattcactcattcattcattcattcattcattc        cctt"
#  "acaggccctctcaatcattcattcactcattcattcattcattcattcattcattcattccctt"
#   <-------------------- endseq1 --------------------->
#                                                               <-->
#                                                                 ^
#                                                              endseq2
#                                                       <------>
#                                                         ^
#                                                      extraseq
#print("# common end seq")
#print(i2)
#print(substr(seq1, nchar(seq1)-i2+1, nchar(seq1)))
#print(substr(seq2, nchar(seq2)-i2+1, nchar(seq2)))
extraSeq <- substr(seq2, i1+1, i1+nchar(seq2)-nchar(seq1))
#print("# extra seq")
#print(extraSeq)
cutExtraseq <- vapply(seq.int(from=1,to=nchar(extraSeq), by=size),
function(i) substr(extraSeq, i, i+(size-1)),
'acgt')
#print("# extra cut seq")
#print(cutExtraseq)
#print(substr(seq1,1,i1))
#print(substr(seq1, i1-size, i1-1))
ok2 <- all(substr(seq1, i1-size+1, i1)==cutExtraseq)
if (!ok2) return(0)
return(list(nbDiff= length(cutExtraseq)*ifelse(orientation, 1, -1), motif = cutExtraseq))
}
linkedByOneDiff <- function(seq1, seq2) {
len1 <- nchar(seq1)
len2 <- nchar(seq2)
if (nchar(seq1)>nchar(seq2))  {
tmp  <- seq1
seq1 <- seq2
seq2 <- tmp
tmp  <- len1
len1 <- len2
len2 <- tmp
}
if ((len2-len1)>1) return(FALSE)
#patch because the uniq function of the obitool3 does not work properly
if (seq1==seq2) return(TRUE)
#i1 is the length of the common prefix, i.e. position of last matching nucleotide
i1 <- which(c(strsplit(seq1, split = "")[[1]][1:nchar(seq1)]!=strsplit(seq2, split = "")[[1]][1:nchar(seq1)], TRUE) )[1] - 1
rseq1 <- rev(strsplit(substr(seq1, i1+1, nchar(seq1)), split = '')[[1]])
rseq2 <- rev(strsplit(substr(seq2, i1+1, nchar(seq2)), split = '')[[1]])[1:length(rseq1)]
i2 <- which(c(rseq1!=rseq2, TRUE) )[1] - 1
return((i1+i2+1)==len1)
}
load('data.Rdata')
View(l)
View(l[["reads"]])
# get loci
l$ulocusMicrosats
l[["reads"]]
# get samples
l$WCHSamples
install_github('grail','PazhenkovaEA')
file.exists("~/.ssh/id_rsa.pub")
setwd("~/PycharmProjects/ngs_pipelines/grail")
